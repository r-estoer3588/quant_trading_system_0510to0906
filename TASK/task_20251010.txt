はい、まだ重大な問題があります。特に **ドキュメントに記載のない実装詳細**、**エラーハンドリングの不統一**、**パフォーマンス劣化のリスク** が深刻です。

## さらに発見された問題

### 問題24: ドキュメントに記載がないが実装に存在する機能

````python
// common/utils_spy.py
def calculate_trading_days_lag(reference_date, target_date):
    """営業日ラグ計算 - System3でのみ使用"""
    # ドキュメントに記載なし
````

**問題点**:
- System3 だけが使う重要機能がドキュメント化されていない
- 他システムは同等の機能を独自実装している可能性

### 問題25: バッチ処理の不統一

````python
// core/system3.py
# batch_processing を使用
results = process_symbols_batch(...)

// core/system1.py, system2.py...
# 独自の並列処理またはシーケンシャル処理
for symbol in symbols:
    # ...
````

**問題点**:
- System3 は batch_processing.py を使用
- 他システムは使用していない
- パフォーマンスが不均一

### 問題26: エラーログの不統一とデバッグ困難性

````python
// core/system1.py
logger.error(f"Error processing {symbol}")

// core/system3.py
if log_callback:
    log_callback(f"[ERROR] {symbol}: {str(e)}")
else:
    logger.error(...)

// core/system4.py
print(f"Error: {e}")  # 本番環境で print!
````

**問題点**:
- ログ出力方法が 3 パターン存在
- `log_callback` の有無で挙動が変わる
- デバッグ時にログを追跡できない

### 問題27: テストカバレッジの極端な偏り

````python
// test/ ディレクトリ
test_system3.py  # 詳細なテスト
test_system1.py  # 最小限のテスト
# system2,4,5,6 のテストが存在しない
````

**問題点**:
- System3 以外のテストが不十分
- リファクタリング時のリグレッション検出が困難

### 問題28: パフォーマンス測定の欠如

現在の `--benchmark` は処理時間のみ測定していますが：

````python
// 測定されていない重要メトリクス
- メモリ使用量（DataFrame の肥大化）
- ディスクI/O回数（キャッシュミス率）
- CPU使用率（並列処理の効率）
````

### 問題29: 環境変数の乱立と文書化不足

````python
// 各所に散在する環境変数
MIN_DROP3D_FOR_TEST  # System3のみ
VALIDATE_SETUP_PREDICATE  # 一部システムのみ
COMPACT_TODAY_LOGS  # 全体
ENABLE_PROGRESS_EVENTS  # 全体
ROLLING_ISSUES_VERBOSE_HEAD  # CacheManager
# 他にも多数...
````

**問題点**:
- 環境変数の一覧が存在しない
- どの変数がどのシステムに影響するか不明
- デフォルト値が明記されていない

### 問題30: データ整合性チェックの不在

````python
// TRDlist生成後のバリデーションが不足
- setup列とfilter列の整合性チェックなし
- 重複銘柄の検出なし
- 異常値（負のシェア数等）の検出なし
- 配分合計が総資金を超えていないかチェックなし
````

## 完全実装計画 v6（最終版・コピペ用）

```markdown
# 完全実装計画 v6（環境変数・テスト・データ整合性対応）

## Phase 0: 緊急修正（System3 最小復旧）

### TODO 0.1: System3 を落ちない状態に復旧
- [ ] core/system3.py に必須 import 追加
  ```python
  import pandas as pd
  import os as _os
  from common.utils import get_cached_data
  from common.batch_processing import process_symbols_batch
  ```

### TODO 0.2: _compute_indicators() の安全実装
- [ ] precomputed indicators チェック
- [ ] filter 列の追加
- [ ] エラー時の安全な None 返却

### TODO 0.3: prepare_data_vectorized_system3() の実装
- [ ] batch_processing 統合
- [ ] log_callback の None チェック
- [ ] 空辞書対応

### TODO 0.4: generate_candidates_system3() の Diagnostics API 準拠
- [ ] 必須キーを必ず返す
- [ ] 空候補時のデフォルト値

### TODO 0.5: get_total_days_system3() の実装
- [ ] common.system_common.get_total_days() 呼び出し

### TODO 0.6: 最小復旧の検証
- [ ] `python scripts/run_all_systems_today.py --test-mode mini --skip-external` がエラーなく完了

## Phase 1: 環境変数の整理と文書化

### TODO 1.1: 環境変数一覧の作成
- [ ] docs/technical/environment_variables.md を新規作成
- [ ] 全環境変数を列挙：
  ```markdown
  | 変数名 | 対象 | デフォルト | 説明 |
  |--------|------|-----------|------|
  | MIN_DROP3D_FOR_TEST | System3 | None | テスト用drop3d閾値 |
  | VALIDATE_SETUP_PREDICATE | 全システム | 0 | Setup/Predicate一致検証 |
  | COMPACT_TODAY_LOGS | 全体 | 0 | ログ圧縮モード |
  | ... | ... | ... | ... |
  ```

### TODO 1.2: 環境変数の統一管理
- [ ] config/environment.py を新規作成
- [ ] EnvironmentConfig クラスで一元管理：
  ```python
  @dataclass
  class EnvironmentConfig:
      compact_logs: bool = field(default_factory=lambda: bool(int(os.getenv("COMPACT_TODAY_LOGS", "0"))))
      validate_setup: bool = field(default_factory=lambda: bool(int(os.getenv("VALIDATE_SETUP_PREDICATE", "0"))))
      # ...

      @classmethod
      def from_env(cls) -> "EnvironmentConfig":
          return cls()
  ```

### TODO 1.3: 環境変数の影響範囲を明示
- [ ] 各システムファイルの冒頭に影響を受ける環境変数をコメント
- [ ] Copilot Instructions に環境変数一覧へのリンク追加

## Phase 2: ドキュメントと実装の完全同期

### TODO 2.1: 実装状況マトリクスの作成
- [ ] docs/today_signal_scan/implementation_status.md を作成
- [ ] フェーズ × 機能のマトリクス：
  ```markdown
  | フェーズ | ドキュメント記載 | 実装状況 | 差分 |
  |---------|---------------|---------|------|
  | Phase 3 共有指標 | あり | なし | Phase削除を提案 |
  | Phase 6 エントリー価格 | あり | なし | 実装必要 |
  | ... | ... | ... | ... |
  ```

### TODO 2.2: Phase 3（共有指標計算）の扱いを決定
- [ ] precomputed indicators で代替可能か検証
- [ ] 代替可能なら：
  - [ ] docs/today_signal_scan/README.md から Phase 3 削除
  - [ ] 以降のフェーズ番号を繰り上げ（4→3, 5→4...）
  - [ ] 各 md ファイル名をリナンバリング
- [ ] 必要なら：
  - [ ] common/shared_indicators.py の活用方法を実装
  - [ ] scripts/run_all_systems_today.py に Phase 3 処理追加

### TODO 2.3: 未実装機能の明示
- [ ] 各フェーズ md に実装状況セクション追加：
  ```markdown
  ## 実装状況
  - ✅ 実装済み: フィルター列生成
  - ⚠️ 部分実装: Setup列（System3のみ完全）
  - ❌ 未実装: エントリー価格計算
  ```

## Phase 3: エラーハンドリングの統一

### TODO 3.1: 統一エラーハンドリングフレームワーク
- [ ] common/error_handling.py を新規作成
- [ ] カスタム例外階層：
  ```python
  class QuantTradingError(Exception):
      """基底例外"""

  class DataError(QuantTradingError):
      """データ関連エラー"""

  class CalculationError(QuantTradingError):
      """計算エラー"""

  class SystemError(QuantTradingError):
      """システム処理エラー"""
  ```

### TODO 3.2: 統一ロガーの実装
- [ ] common/logging_config.py を拡張
- [ ] SystemLogger クラス：
  ```python
  class SystemLogger:
      def __init__(self, system_name: str, log_callback=None):
          self.system = system_name
          self.callback = log_callback
          self.logger = logging.getLogger(f"system.{system_name}")

      def error(self, msg: str, exc_info=None):
          formatted = f"[{self.system}] {msg}"
          if self.callback:
              self.callback(formatted)
          self.logger.error(formatted, exc_info=exc_info)
  ```

### TODO 3.3: 全システムでの統一ロガー使用
- [ ] core/system*.py で SystemLogger を使用
- [ ] print() の完全排除
- [ ] エラー時の一貫したログフォーマット

## Phase 4: バッチ処理の統一

### TODO 4.1: 全システムで batch_processing 使用
- [ ] core/system1.py, system2.py... を batch_processing に移行
- [ ] process_symbols_batch() の統一利用
- [ ] 並列処理パラメータの統一

### TODO 4.2: バッチ処理のパフォーマンス最適化
- [ ] batch_size のデフォルト値を調整
- [ ] メモリ使用量の監視
- [ ] プロセスプール vs スレッドプールの選択基準を文書化

## Phase 5: テストカバレッジの拡充

### TODO 5.1: 全システムの基本テスト作成
- [ ] test/test_system1.py の拡充
- [ ] test/test_system2.py, test_system4.py... の新規作成
- [ ] 最低限のテスト内容：
  - データ準備処理
  - 候補生成処理
  - Diagnostics 出力

### TODO 5.2: 統合テストの作成
- [ ] test/integration/test_all_systems_consistency.py
- [ ] 全システムが同じインターフェースに準拠しているか検証
- [ ] Diagnostics の必須キー存在確認

### TODO 5.3: データ整合性テスト
- [ ] test/integration/test_data_validation.py
- [ ] TRDlist の整合性チェック
- [ ] setup/filter 列の一致検証
- [ ] 配分合計の上限チェック

## Phase 6: パフォーマンス測定の拡充

### TODO 6.1: 詳細パフォーマンスメトリクスの追加
- [ ] common/performance_monitor.py を新規作成
- [ ] PerformanceMonitor クラス：
  ```python
  class PerformanceMonitor:
      def __init__(self):
          self.metrics = {
              "execution_time": {},
              "memory_usage": {},
              "disk_io": {},
              "cache_hits": 0,
              "cache_misses": 0,
          }

      @contextmanager
      def measure_phase(self, phase_name: str):
          # 時間・メモリを測定
  ```

### TODO 6.2: --benchmark の拡張
- [ ] scripts/run_all_systems_today.py の --benchmark で詳細メトリクス出力
- [ ] results_csv_test/performance_detailed_{timestamp}.json に保存
- [ ] メモリ、ディスクI/O、CPU使用率を含める

### TODO 6.3: パフォーマンス劣化の検出
- [ ] tools/performance_baseline.py を新規作成
- [ ] ベースライン値との比較
- [ ] 許容範囲を超えた場合の警告

## Phase 7: データ整合性チェックの実装

### TODO 7.1: TRDlist バリデーターの実装
- [ ] common/trdlist_validator.py を新規作成
- [ ] TRDlistValidator クラス：
  ```python
  class TRDlistValidator:
      def validate(self, df: pd.DataFrame) -> list[str]:
          """バリデーション実行、エラーリストを返す"""
          errors = []

          # setup/filter 整合性
          if (df["setup"] & ~df["filter"]).any():
              errors.append("Setup=True but Filter=False found")

          # 重複銘柄
          duplicates = df[df.duplicated(subset=["symbol"])]
          if not duplicates.empty:
              errors.append(f"Duplicate symbols: {duplicates['symbol'].tolist()}")

          # 異常値
          if (df["shares"] < 0).any():
              errors.append("Negative shares found")

          return errors
  ```

### TODO 7.2: 配分合計チェック
- [ ] core/final_allocation.py に総資金チェック追加
- [ ] 配分合計 > 総資金 の場合は警告 + 比例縮小

### TODO 7.3: バリデーション結果のレポート
- [ ] --save-csv 時に自動バリデーション実行
- [ ] results_csv_test/validation_report_{timestamp}.json に保存
- [ ] 重大エラーがある場合は処理を中断

## Phase 8: Two-Phase 処理の完全一元化

### TODO 8.1: Filter 生成の一元化
- [ ] common/today_filters.py のみで filter 列生成
- [ ] core/system*.py から Filter 処理を完全削除
- [ ] prepare_data 関数は filter 列を参照のみ

### TODO 8.2: Setup 判定の一元化
- [ ] common/system_setup_predicates.py に全システムの predicate 実装
- [ ] generate_candidates で predicate 呼び出し
- [ ] setup 列と predicate の完全一致を保証

### TODO 8.3: VALIDATE_SETUP_PREDICATE の全システム対応
- [ ] 環境変数=1 で全システムの一致検証
- [ ] 不一致時の詳細ログ（どの銘柄・どの行で不一致か）

## Phase 9: エントリー/エグジット処理の実装

### TODO 9.1: トレードルールの完全定義
- [ ] data/trading_rules/{system1-7}_rules.yaml 作成
- [ ] 各システムのエントリー・エグジットルールを明文化

### TODO 9.2: トレード計算エンジン実装
- [ ] common/trade_engine.py 実装
- [ ] エントリー価格、ストップ価格、ターゲット価格の計算

### TODO 9.3: TRDlist への情報付与
- [ ] common/today_output.py でトレード情報を計算
- [ ] entry_price, stop_price, target_price, shares, position_size, risk_amount を追加

## Phase 10: ポジション管理システムの実装

### TODO 10.1: ポジション DB 設計
- [ ] data/positions/positions.db スキーマ設計
- [ ] positions, trades, pnl_history テーブル

### TODO 10.2: PositionManager 実装
- [ ] core/position_manager.py 実装
- [ ] CRUD 操作、P&L 計算

### TODO 10.3: エグジット監視
- [ ] core/exit_monitor.py 実装
- [ ] 日次エグジットチェック
- [ ] ExitList_{日付}.csv 生成

## Phase 11: システム共通化の完成

### TODO 11.1: 共通ユーティリティ集約
- [ ] common/system_utils.py に統合：
  - calculate_trading_days_lag（System3から抽出）
  - apply_top_off_logic（System3から抽出）
  - rank_by_metric（共通ランキング）

### TODO 11.2: 共通基底クラス実装
- [ ] core/system_base.py 実装
- [ ] SystemBase 抽象基底クラス
- [ ] Template Method パターンで共通処理を実装

### TODO 11.3: 全システムのリファクタリング
- [ ] System1-7 を SystemBase 継承に移行
- [ ] 共通処理の重複を排除

## Phase 12: ドキュメント完全同期

### TODO 12.1: 実装状況の反映
- [ ] docs/today_signal_scan/ 各 md を実装に合わせて更新
- [ ] 未実装部分は明記
- [ ] コード参照リンクを追加

### TODO 12.2: 環境変数ドキュメント統合
- [ ] docs/README.md に環境変数セクション追加
- [ ] Copilot Instructions から参照

### TODO 12.3: 運用ガイドの更新
- [ ] docs/operations/ にポジション管理手順追加
- [ ] トラブルシューティングガイド拡充

## 実装優先順位（最終決定版）

1. **最優先（Phase 0）**: System3 最小復旧
2. **緊急（Phase 1-2）**: 環境変数整理 + ドキュメント同期
3. **重要（Phase 3-5）**: エラー処理統一 + バッチ処理統一 + テスト拡充
4. **必要（Phase 6-7）**: パフォーマンス測定 + データ整合性
5. **基盤（Phase 8-10）**: Two-Phase 完成 + トレード実行 + ポジション管理
6. **品質（Phase 11-12）**: 共通化完成 + ドキュメント完成

## 成功基準チェックリスト

- [ ] System3 が mini テストでエラーなく動作
- [ ] 全環境変数が文書化され、一元管理されている
- [ ] ドキュメントと実装の差分が可視化・解消されている
- [ ] Phase 3 の扱いが明確（実装 or 削除）
- [ ] 全システムで統一ロガー使用、print() 排除
- [ ] 全システムで batch_processing 使用
- [ ] System1-7 すべてに基本テスト存在
- [ ] パフォーマンス測定が詳細化（時間・メモリ・I/O）
- [ ] TRDlist バリデーションが自動実行
- [ ] Two-Phase が完全一元化（重複なし）
- [ ] TRDlist にエントリー/ストップ/サイズ情報
- [ ] ポジション管理システムが動作
- [ ] 全システムが SystemBase 継承
- [ ] ドキュメントが実装を正確に反映
```

この v6 が最も包括的な実装計画です。特に環境変数の乱立、エラーハンドリングの不統一、テストカバレッジの偏り、データ整合性チェックの不在といった、これまで見落とされていた問題に対処しています。
