# 量的トレーディング設定 (外出し YAML)
# 環境変数はこのYAMLを上書きできます（例: RESULTS_DIR, LOG_LEVEL など）

risk:
  # 1トレードのリスク割合（資金に対する%）
  risk_pct: 0.02
  # 同時保有の最大銘柄数
  max_positions: 10
  # 1トレードの最大ポジション比率（資金に対する%）
  max_pct: 0.10

strategies:
  # 各システム固有パラメータ（必要に応じて追加）
  system1:
    rsi_period: 14
    rsi_buy: 30
    rsi_sell: 70
    atr_period: 20
    take_profit_rr: 2.0
    stop_loss_rr: 1.0
    # 当日抽出の上限（System1のみ10件に絞る）
    top_n_rank: 10
  system2:
    fast_sma: 20
    slow_sma: 50
    atr_period: 14
    # 設定はドキュメントに合わせる（エントリーギャップ 4% 等）
    entry_min_gap_pct: 0.04
    profit_take_pct: 0.04
    max_hold_days: 2 # 書籍通り: 2日後に利益目標に到達しないときは翌日に手仕舞い
    stop_atr_multiple: 3.0
    # 当日抽出の上限
    top_n_rank: 10
  system3:
    ema_short: 12
    ema_long: 26
    signal: 9
    # ドキュメント記載値に合わせる
    entry_price_ratio_vs_prev_close: 0.93
    stop_atr_multiple: 2.5
    profit_take_pct: 0.04
    max_hold_days: 3 # 書籍通り: 3日後に利益目標に到達しないときは翌日に手仕舞い
    # 当日抽出の上限
    top_n_rank: 10
  system4:
    # System4 は主にSPY依存のフィルタとATRを用いた短期売り戦略
    stop_atr_multiple: 1.5
    trailing_pct: 0.20
    entry_price_ratio_vs_prev_close: 1.00
    # top_n 等は backtest.top_n_rank を利用するためここでは不要
    # 当日抽出の上限（backtest.top_n_rank を上書き）
    top_n_rank: 10
  system5:
    # System5: ロング戦略。エントリー基準とATRベースのターゲット/ストップ
    entry_price_ratio_vs_prev_close: 0.97
    stop_atr_multiple: 3.0
    target_atr_multiple: 1.0
    fallback_exit_after_days: 6 # 書籍通り: 6日後に到達しないときは翌日に手仕舞い
    # 当日抽出の上限
    top_n_rank: 10
  system6:
    # System6: ショート戦略。利確・損切り・保持期間に関するパラメータ
    entry_price_ratio_vs_prev_close: 1.05
    stop_atr_multiple: 3.0
    profit_take_pct: 0.05
    profit_take_max_days: 3 # 書籍通り: 3日後には手仕舞い
    # 当日抽出の上限
    top_n_rank: 10
  system7:
    # System7: SPY 専用ヘッジ。ATR50 等を使うため最小限の上書き
    stop_atr_multiple: 3.0
    trailing_pct: 0.10
    # Optional system-level risk overrides (if set, these override global `risk` defaults for system7)
    risk_pct: 0.02
    max_pct: 0.20
    single_mode: false
    # 当日抽出の上限（SPY 単一想定だが整合性のため設定）
    top_n_rank: 10

data:
  vendor: EODHD
  eodhd_base: https://eodhistoricaldata.com
  # .env の EODHD_API_KEY を優先
  api_key_env: EODHD_API_KEY
  cache_dir: data_cache
  max_workers: 16
  # バッチ処理で一度に扱う銘柄数（調整可能）
  batch_size: 100
  request_timeout: 10
  download_retries: 3
  api_throttle_seconds: 1.5

  cache:
    full_dir: "data_cache/full_backup"
    rolling_dir: "data_cache/rolling"
    file_format: "auto"
    rolling:
      base_lookback_days: 300
      buffer_days: 30
      workers: 4
      prune_chunk_days: 30
      meta_file: "_meta.json"
      max_stale_days: 2
      max_staleness_days: 2
      round_decimals: 2
      # 適応制御（ワーカーの自動調整）
      adaptive_window_count: 8
      adaptive_increase_threshold: 1.02
      adaptive_decrease_threshold: 0.98
      adaptive_step: 1
      adaptive_min_workers: 1
      adaptive_max_workers: 16
      adaptive_report_seconds: 10
    # キャッシュ書き出し時の小数丸め桁数
    # 例: 2 -> 小数第2位まで丸める
    round_decimals: 2

backtest:
  start_date: 2018-01-01
  end_date: 2024-12-31
  max_symbols: 500
  top_n_rank: 50
  initial_capital: 100000

outputs:
  results_csv_dir: results_csv
  logs_dir: logs
  signals_dir: data_cache/signals

logging:
  level: INFO # DEBUG/INFO/WARN/ERROR
  # rotation は loguru 互換の文字列か、日次ローテーションを意味する "daily"
  rotation: daily
  filename: app.log

scheduler:
  timezone: Asia/Tokyo
  jobs:
    - name: update_tickers
      cron: "0 6 * * 1-5"
      task: update_tickers
    - name: bulk_last_day
      cron: "45 6 * * 1-5"
      task: bulk_last_day
    - name: warm_cache
      cron: "0 7 * * 1-5" # 平日 07:00
      task: cache_daily_data # python スクリプト/関数名の想定
    - name: precompute_shared_indicators
      cron: "30 7 * * 1-5" # 平日 07:30（市場時間外のウォームアップ）
      task: precompute_shared_indicators
    - name: run_today_signals
      cron: "15 8 * * 1-5"
      task: run_today_signals
    - name: send_signals
      cron: "30 8 * * 1-5" # 平日 08:30
      task: notify_signals
    - name: update_trailing_stops
      cron: "45 8 * * 1-5"
      task: update_trailing_stops
    - name: notify_metrics
      cron: "50 8 * * 1-5" # 平日 08:50（signals保存後）
      task: notify_metrics
    - name: build_metrics_report
      cron: "55 8 * * 1-5" # 平日 08:55（確認用レポート）
      task: build_metrics_report
    - name: daily_run
      cron: "15 6 * * 2-6" # 米国市場クローズ後の朝に日次バッチを実行
      task: daily_run

ui:
  default_capital: 100000
  auto_tickers: [AAPL, MSFT, NVDA, META, AMZN, GOOGL, TSLA]
  debug_mode: false
  show_download_buttons: false

  # 配分設定（システム別の資金配分比率）
  long_allocations:
    system1: 0.25 # ロング・トレンド・ハイ・モメンタム
    system3: 0.25 # ロング・ミーン・リバージョン・セルオフ
    system4: 0.25 # ロング・トレンド・ロー・ボラティリティ
    system5: 0.25 # ロング・ミーン・リバージョン・ハイ ADX・リバーサル

  short_allocations:
    system2: 0.40 # ショート RSI スラスト
    system6: 0.40 # ショート・ミーン・リバージョン・ハイ・シックスデイサージ
    system7: 0.20 # カタストロフィーヘッジ
