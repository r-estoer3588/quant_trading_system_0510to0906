name: Codacy Analysis

on:
    push:
        branches: [main, develop, branch0906]
    pull_request:
        branches: [main, develop]

jobs:
    codacy-security-scan:
        name: Codacy Security Scan
        runs-on: ubuntu-latest
        steps:
            # Checkout the repository content to GitHub Actions runner
            - name: Checkout code
              uses: actions/checkout@v4

            # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
            - name: Run Codacy Analysis CLI
              uses: codacy/codacy-analysis-cli-action@master
              with:
                  # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
                  # You can also omit the token and run the tools that support default configurations
                  project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
                  verbose: true
                  output: results.sarif
                  format: sarif
                  # Adjust severity of non-security issues
                  gh-code-scanning-compat: true
                  # Force 0 exit code to allow SARIF file generation
                  # This will handover control about PR rejection to the GitHub side
                  max-allowed-issues: 2147483647

            # Upload the SARIF file generated in the previous step
            - name: Upload SARIF results file
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: results.sarif

    code-quality-check:
        name: Python Code Quality
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.11"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install ruff black mypy
                  if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

            - name: Run Ruff linter
              run: ruff check . --output-format=github

            - name: Run Black formatter check
              run: black --check --diff .

            - name: Run basic Python syntax check
              run: |
                  python -m py_compile apps/app_today_signals.py
                  python -m py_compile apps/app_integrated.py
