name: Enhanced Code Quality and Tests

on:
  push:
    branches: [main, master, develop, branch0906]
  pull_request:
    branches: ["**"]

jobs:
  build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Code formatting check with black
        run: |
          black --check --diff .

      - name: Import order check with isort
        run: |
          isort --check-only --diff .

      - name: Lint with ruff
        run: |
          # Critical errors first
          ruff check --format=github --select=E9,F63,F7,F82 --target-version=py310 .
          # Full linting
          ruff check .

      - name: Type checking with mypy
        continue-on-error: true
        run: |
          mypy core/ common/ --ignore-missing-imports --no-strict-optional --show-error-codes

      - name: Security check with bandit
        continue-on-error: true
        run: |
          bandit -q -r core/ common/ strategies/ -x tests --severity-level medium

      - name: Dependency audit with pip-audit
        continue-on-error: true
        run: |
          pip-audit --desc --disable-pip

      - name: Run enhanced unit tests
        env:
          RUNNING_IN_CI: "1"
          SKIP_EXTERNAL_APIS: "1"
          PYTHONPATH: "."
        run: |
          python -m pytest tests/test_final_allocation_enhanced.py -v --tb=short --cov=core.final_allocation --cov-report=xml --cov-report=term-missing

      - name: Run core integration tests
        env:
          RUNNING_IN_CI: "1"
          SKIP_EXTERNAL_APIS: "1"
          PYTHONPATH: "."
        run: |
          python -m pytest tests/test_super_simple.py tests/test_settings_focused.py -q

      - name: Run mini pipeline performance test
        env:
          RUNNING_IN_CI: "1"
          SKIP_EXTERNAL_APIS: "1"
          PYTHONPATH: "."
        timeout-minutes: 5
        run: |
          python scripts/run_all_systems_today.py --test-mode mini --skip-external --benchmark

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-artifacts-py${{ matrix.python-version }}
          path: |
            coverage.xml
            *.log
            test_coverage/
          retention-days: 30
