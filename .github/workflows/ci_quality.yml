name: CI Quality Gate

on:
  push:
    branches: [ main, master, develop, branch0906 ]
  pull_request:
    branches: [ main, master, develop, branch0906 ]

jobs:
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libatlas-base-dev libopenblas-dev
      - name: Install Python deps
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install ruff mypy
      - name: Ruff Lint
        run: ruff check . --output-format=github
      - name: Type Check (mypy)
        run: |
          mypy --python-version 3.11 --show-error-codes 2>&1 | tee mypy_output.log || true
      - name: Summarize mypy errors
        run: |
          ERRORS=$(grep -E "error: " -c mypy_output.log || true)
          echo "mypy error count: ${ERRORS}" >> $GITHUB_STEP_SUMMARY
          echo "MYPY_ERROR_COUNT=${ERRORS}" >> $GITHUB_ENV
      - name: Upload mypy artifact
        uses: actions/upload-artifact@v4
        with:
          name: mypy-output
          path: mypy_output.log
          if-no-files-found: ignore
      - name: Pytest (mini fast path)
        env:
          PYTEST_USE_FAKE_SYMBOLS: '1'
          TODAY_SYMBOL_LIMIT: '20'
          COMPACT_TODAY_LOGS: '1'
          ENABLE_PROGRESS_EVENTS: '0'
        run: |
          pytest -q --maxfail=1 --disable-warnings
      - name: Collect Warnings (non-fail)
        env:
          PYTEST_USE_FAKE_SYMBOLS: '1'
          TODAY_SYMBOL_LIMIT: '20'
        run: |
          set -o pipefail
          pytest -q -W default | tee pytest_warnings.log || true
          python tools/collect_warnings.py --log pytest_warnings.log --out logs/warnings_summary.jsonl || true
          echo '--- Warning Categories (top 20) ---' >> $GITHUB_STEP_SUMMARY
          grep -E 'Warning:' -o pytest_warnings.log | sort | uniq -c | sort -nr | head -20 >> $GITHUB_STEP_SUMMARY || true
      - name: Upload warnings artifact
        uses: actions/upload-artifact@v4
        with:
          name: pytest-warnings
          path: |
            pytest_warnings.log
            logs/warnings_summary.jsonl
          if-no-files-found: ignore
      - name: Codacy Analysis (SARIF)
        if: ${{ github.event_name == 'pull_request' && secrets.CODACY_PROJECT_TOKEN != '' }}
        # NOTE: For higher supply-chain safety, pin to a specific commit SHA instead of @v1.
        uses: codacy/codacy-analysis-cli-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          upload: true
          format: sarif
          output: codacy.sarif
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
      - name: Upload Codacy SARIF
        if: ${{ github.event_name == 'pull_request' && secrets.CODACY_PROJECT_TOKEN != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: codacy.sarif
      - name: Summary
        if: always()
        run: |
          echo 'Completed CI Quality Gate' >> $GITHUB_STEP_SUMMARY
